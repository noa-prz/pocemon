import streamlit as st
import pandas as pd
import sqlite3
import os

# Fichiers utilis√©s
EXCEL_FILE = "base_de_donnees_pokemon.xlsx"
DB_FILE = "pokemon.db"

# Fonction d'initialisation de la base SQLite √† partir de l'Excel
def init_db_from_excel():
    # Connexion √† la base SQLite (cr√©ation si n√©cessaire)
    conn = sqlite3.connect(DB_FILE, check_same_thread=False)
    cursor = conn.cursor()
    # Cr√©ation de la table si elle n'existe pas d√©j√†
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS pokemon (
            Pokemon TEXT PRIMARY KEY,
            PNG TEXT,
            Disponibilit√© TEXT,
            Nom TEXT,
            Message TEXT
        )
    """)
    conn.commit()
    # Si la table est vide, on ins√®re toutes les lignes depuis l'Excel initial
    cursor.execute("SELECT COUNT(*) FROM pokemon")
    count = cursor.fetchone()[0]
    if count == 0:
        df = pd.read_excel(EXCEL_FILE)
        df.to_sql("pokemon", conn, if_exists="append", index=False)
    return conn

# Initialisation de la base
conn = init_db_from_excel()

# Fonction pour obtenir les Pok√©mon disponibles
def get_available_pokemon(conn):
    query = "SELECT * FROM pokemon WHERE Disponibilit√© = 'Disponible'"
    df = pd.read_sql_query(query, conn)
    return df

# Configurer Streamlit
st.set_page_config(layout="wide", page_title="Pot de d√©part Micka√´l", page_icon="üéâ")
st.title("Pot de D√©part de Micka√´l")

st.text("Pour son pot de d√©part, nous allons faire un jeu de carte avec les mots de chacun sur le th√®me de Pok√©mon, en effet la communaut√© Pok√©mon au sein de OnePoint est plus grande que l'on s'imagine !")
col1, col2 = st.columns(2)
prenom = col1.text_input("Pr√©nom :", key="prenom")
nom = col2.text_input("Nom :", key="nom")
message = st.text_area("Ton message d'au revoir (max 150 caract√®res car limit√© par la taille de la carte) :", max_chars=150, key="message")

# Affichage de la grille des Pok√©mon disponibles
st.subheader("Choisis un Pok√©mon :")
df_dispo = get_available_pokemon(conn)
# Conversion du DataFrame en liste de dictionnaires
pokemon_list = df_dispo.to_dict(orient="records")

# D√©finir le nombre de colonnes par ligne
num_cols = 8
cols = st.columns(num_cols)

# Initialiser la variable de s√©lection dans la session
if "selected_pokemon" not in st.session_state:
    st.session_state["selected_pokemon"] = None

for idx, pokemon in enumerate(pokemon_list):
    col = cols[idx % num_cols]
    with col:
        image_path = os.path.join("pokmon", pokemon["PNG"])
        st.image(image_path, width=150)
        if st.button(pokemon["Pokemon"], key=pokemon["Pokemon"]):
            st.session_state["selected_pokemon"] = pokemon["Pokemon"]

if st.session_state["selected_pokemon"]:
    st.info(f"Vous avez s√©lectionn√© : **{st.session_state['selected_pokemon']}**")
else:
    st.info("Aucun Pok√©mon s√©lectionn√© pour le moment.")

# Bouton pour envoyer les informations
col_center = st.columns([1,1,1])
with col_center[1]:
    if st.button("Envoyer", key="envoyer", help="Cliquez pour envoyer votre message", use_container_width=True):
        if nom and message and st.session_state["selected_pokemon"]:
            cursor = conn.cursor()
            cursor.execute("""
                UPDATE pokemon
                SET Nom = ?, Message = ?, Disponibilit√© = 'Indisponible'
                WHERE Pokemon = ?
            """, (nom, message, st.session_state["selected_pokemon"]))
            conn.commit()
            st.success("Ton message a bien √©t√© envoy√© et enregistr√© dans la base de donn√©es !")
            st.session_state["selected_pokemon"] = None
        else:
            st.error("Merci de remplir tous les champs et de s√©lectionner un Pok√©mon !")
